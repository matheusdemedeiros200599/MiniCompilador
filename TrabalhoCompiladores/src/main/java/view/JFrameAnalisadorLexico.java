/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import analisador.Identificador;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import analisador.Lexer;
import analisador.Token;
import java.io.IOException;
import java.util.Vector;
import javax.swing.JOptionPane;

/**
 *
 * @author Matheus
 */
public class JFrameAnalisadorLexico extends javax.swing.JFrame {

    /**
     * Creates new form JFrameAnalisadorLexico
     */
    List<Identificador> jFlexTokensList;
    Vector<String> listaTokens;
    Vector<String> tabelaSimbolos;
    String nome;

    public JFrameAnalisadorLexico() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelAnalisadorLexico = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaCodigo = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListListaTokens = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListTabelaSimbolos = new javax.swing.JList<>();
        jButtonAnalisar = new javax.swing.JButton();
        jButtonLimpar = new javax.swing.JButton();
        jButtonSalvar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mini compilador");

        jTextAreaCodigo.setColumns(20);
        jTextAreaCodigo.setRows(5);
        jScrollPane1.setViewportView(jTextAreaCodigo);

        jLabel1.setText("Insira o código aqui:");

        jScrollPane2.setViewportView(jListListaTokens);

        jLabel2.setText("Lista de tokens:");

        jLabel3.setText("Tabela de símbolos:");

        jScrollPane3.setViewportView(jListTabelaSimbolos);

        jButtonAnalisar.setText("Analisar");
        jButtonAnalisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAnalisarActionPerformed(evt);
            }
        });

        jButtonLimpar.setText("Limpar");
        jButtonLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimparActionPerformed(evt);
            }
        });

        jButtonSalvar.setText("Salvar resultados");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelAnalisadorLexicoLayout = new javax.swing.GroupLayout(jPanelAnalisadorLexico);
        jPanelAnalisadorLexico.setLayout(jPanelAnalisadorLexicoLayout);
        jPanelAnalisadorLexicoLayout.setHorizontalGroup(
            jPanelAnalisadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAnalisadorLexicoLayout.createSequentialGroup()
                .addGroup(jPanelAnalisadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAnalisadorLexicoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
                    .addGroup(jPanelAnalisadorLexicoLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelAnalisadorLexicoLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonSalvar)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonAnalisar)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanelAnalisadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelAnalisadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanelAnalisadorLexicoLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane2, jScrollPane3});

        jPanelAnalisadorLexicoLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonAnalisar, jButtonLimpar});

        jPanelAnalisadorLexicoLayout.setVerticalGroup(
            jPanelAnalisadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAnalisadorLexicoLayout.createSequentialGroup()
                .addGroup(jPanelAnalisadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelAnalisadorLexicoLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelAnalisadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonLimpar)
                            .addComponent(jButtonAnalisar)
                            .addComponent(jButtonSalvar)))
                    .addGroup(jPanelAnalisadorLexicoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelAnalisadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelAnalisadorLexicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))))
                .addContainerGap())
        );

        jPanelAnalisadorLexicoLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButtonAnalisar, jButtonLimpar});

        jTabbedPane1.addTab("Analisador lexico", jPanelAnalisadorLexico);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 442, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Analisador sintático", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimparActionPerformed
        limpar();
    }//GEN-LAST:event_jButtonLimparActionPerformed

    private void jButtonAnalisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAnalisarActionPerformed

        try {
            analisar();
            this.jListListaTokens.setListData(this.listaTokens);
        } catch (IOException ex) {
            System.out.println("Erro!!");
        }
        this.jListTabelaSimbolos.setListData(this.tabelaSimbolos);


    }//GEN-LAST:event_jButtonAnalisarActionPerformed

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed

        File arquivo = new File("resultado.txt");
        PrintWriter writer;
        try {
            writer = new PrintWriter(arquivo);
            String aux = "Código original:\n";
            aux += "\n" + jTextAreaCodigo.getText();
            aux += "\nLista de Tokens:\n";
            for (int i = 0; i < listaTokens.size(); i++) {
                aux = aux + "\n" + listaTokens.get(i);
            }
            aux += "\nTabela de símbolos:\n";
            for (int i = 0; i < tabelaSimbolos.size(); i++) {
                aux = aux + "\n" + tabelaSimbolos.get(i);
            }
            writer.print(aux);

            writer.close();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Erro!");
            Logger.getLogger(JFrameAnalisadorLexico.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonSalvarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameAnalisadorLexico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameAnalisadorLexico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameAnalisadorLexico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameAnalisadorLexico.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameAnalisadorLexico().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAnalisar;
    private javax.swing.JButton jButtonLimpar;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jListListaTokens;
    private javax.swing.JList<String> jListTabelaSimbolos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelAnalisadorLexico;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextAreaCodigo;
    // End of variables declaration//GEN-END:variables

    public void analisar() throws FileNotFoundException, IOException {
        //int contIDs = this.listaTokens.size();
        jFlexTokensList = new LinkedList<Identificador>();
        listaTokens = new Vector<>();
        preencherPalavrasReservadas();
        File arquivo = new File("arquivo.txt");
        PrintWriter writer;
        try {
            writer = new PrintWriter(arquivo);
            //System.out.println(jTextAreaCodigo.getText());
            writer.print(jTextAreaCodigo.getText());
            writer.close();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Erro!");
            Logger.getLogger(JFrameAnalisadorLexico.class.getName()).log(Level.SEVERE, null, ex);
        }
        Reader reader = new BufferedReader(new FileReader("arquivo.txt"));
        Lexer lexer = new Lexer(reader);

        String resultado = lexer.yytext();

        while (true) {
            Token token = lexer.yylex();

            if (token == null) {
                for (int i = 0; i < jFlexTokensList.size(); i++) {
                    System.out.println(jFlexTokensList.get(i).getNome() + "=" + jFlexTokensList.get(i).getID());
                }

                return;
            }
            Identificador tokenitem;
            String retorno = "";
            switch (token) {

                case SOMA:
                    listaTokens.add("+");
                    break;
                case SUBTRACAO:
                    listaTokens.add("-");
                    break;
                case MULTIPLICACAO:
                    listaTokens.add("*");
                    break;
                case DIVISAO:
                    listaTokens.add("/");
                    break;
                case ATRIBUICAO:
                    listaTokens.add("=");
                    break;
                case ERRO:
                    listaTokens.add("Erro, símbolo não reconhecido.");
                    break;
                case ID: {
                    if (analisarPalavra(lexer.lexema).equals("")) {
                        tokenitem = new Identificador(lexer.lexema, this.tabelaSimbolos.size() + 1);
                        jFlexTokensList.add(tokenitem);
                        listaTokens.add("ID (" + tokenitem.getID() + ");");
                        //tabelaSimbolos.add("(" + tokenitem.getID() + ") " + tokenitem.getNome() + ";");
                        tabelaSimbolos.add(tokenitem.toString());
                    } else {
                        listaTokens.add(analisarPalavra(lexer.lexema));
                    }

                    break;
                }
                case NUM_INTEIRO:
                    listaTokens.add(lexer.lexema);
                    break;
                case COMPARACAO:
                    //Rever a comparação no VISUALG
                    listaTokens.add("==");
                    break;
                case ALEATORIO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("ALEATORIO");
                    listaTokens.add(retorno);
                    break;
                case ALGORITMO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("ALGORITMO");
                    listaTokens.add(retorno);
                    break;
                case ARQUIVO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("ARQUIVO");
                    listaTokens.add(retorno);
                    break;
                case ATE:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("ATE");
                    listaTokens.add(retorno);
                    break;
                case CARACTERE:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("CARACTERE");
                    listaTokens.add(retorno);
                    break;
                case CASO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("CASO");
                    listaTokens.add(retorno);
                    break;
                case CRONOMETRO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("CRONOMETRO");
                    listaTokens.add(retorno);
                    break;
                case DEBUG:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("DEBUG");
                    listaTokens.add(retorno);
                    break;
                case E:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("E");
                    listaTokens.add(retorno);
                    break;
                case ECO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("ECO");
                    listaTokens.add(retorno);
                    break;
                case ENTAO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("ENTAO");
                    listaTokens.add(retorno);
                    break;
                case ENQUANTO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("ENQUANTO");
                    listaTokens.add(retorno);
                    break;
                case ESCOLHA:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("ESCOLHA");
                    listaTokens.add(retorno);
                    break;
                case ESCREVA:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("ESCREVA");
                    listaTokens.add(retorno);
                    break;
                case ESCREVAL:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("ESCREVAL");
                    listaTokens.add(retorno);
                    break;
                case FACA:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("FACA");
                    listaTokens.add(retorno);
                    break;
                case FALSO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("FALSO");
                    listaTokens.add(retorno);
                    break;
                case FIMALGORITMO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("FIMALGORITMO");
                    listaTokens.add(retorno);
                    break;
                case FIMENQUANTO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("FIMENQUANTO");
                    listaTokens.add(retorno);
                    break;
                case FIMESCOLHA:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("FIMESCOLHA");
                    listaTokens.add(retorno);
                    break;
                case FIMFUNCAO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("FIMFUNCAO");
                    listaTokens.add(retorno);
                    break;
                case FIMPARA:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("FIMPARA");
                    listaTokens.add(retorno);
                    break;
                case FIMPROCEDIMENTO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("FIMPROCEDIMENTO");
                    listaTokens.add(retorno);
                    break;
                case FIMREPITA:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("FIMREPITA");
                    listaTokens.add(retorno);
                    break;
                case FIMSE:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("FIMSE");
                    listaTokens.add(retorno);
                    break;
                case FUNCAO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("FUNCAO");
                    listaTokens.add(retorno);
                    break;
                case INICIO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("INICIO");
                    listaTokens.add(retorno);
                    break;
                case INT:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("INT");
                    listaTokens.add(retorno);
                    break;
                case INTEIRO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("INTEIRO");
                    listaTokens.add(retorno);
                    break;
                case INTERROMPA:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("INTERROMPA");
                    listaTokens.add(retorno);
                    break;
                case LEIA:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("LEIA");
                    listaTokens.add(retorno);
                    break;
                case LIMPATELA:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("LIMPATELA");
                    listaTokens.add(retorno);
                    break;
                case LOGICO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("LOGICO");
                    listaTokens.add(retorno);
                    break;
                case MOD:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("MOD");
                    listaTokens.add(retorno);
                    break;
                case NAO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("NAO");
                    listaTokens.add(retorno);
                    break;
                case OU:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("OU");
                    listaTokens.add(retorno);
                    break;
                case OUTROCASO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("OUTROCASO");
                    listaTokens.add(retorno);
                    break;
                case PARA:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("PARA");
                    listaTokens.add(retorno);
                    break;
                case PASSO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("PASSO");
                    listaTokens.add(retorno);
                    break;
                case PAUSA:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("PAUSA");
                    listaTokens.add(retorno);
                    break;
                case REAL:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("REAL");
                    listaTokens.add(retorno);
                    break;
                case PROCEDIMENTO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("PROCEDIMENTO");
                    listaTokens.add(retorno);
                    break;
                case REPITA:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("REPITA");
                    listaTokens.add(retorno);
                    break;
                case RETORNE:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("RETORNE");
                    listaTokens.add(retorno);
                    break;
                case SE:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("SE");
                    this.listaTokens.add(retorno);
                    break;
                case SENAO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("SENAO");
                    listaTokens.add(retorno);
                    break;
                case TIMER:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("TIMER");
                    listaTokens.add(retorno);
                    break;
                case VAR:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("VAR");
                    listaTokens.add(retorno);
                    break;
                case VETOR:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("VETOR");
                    listaTokens.add(retorno);
                    break;
                case VERDADEIRO:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("VERDADEIRO");
                    listaTokens.add(retorno);
                    break;
                case XOU:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("XOU");
                    listaTokens.add(retorno);
                    break;
                case DE:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = analisarPalavra("DE");
                    listaTokens.add(retorno);
                    break;

                case ABRE_PARENTESIS:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = "(";
                    listaTokens.add(retorno);
                    break;
                case FECHA_PARENTESIS:
                    tokenitem = new Identificador();
                    tokenitem.setNome(lexer.lexema);
                    retorno = ")";
                    listaTokens.add(retorno);
                    break;
                default:
                    listaTokens.add(lexer.lexema);
                    break;
            }
        }
    }

    public void limpar() {
        listaTokens = new Vector<>();
        tabelaSimbolos = new Vector();
        jTextAreaCodigo.setText("");
        jListListaTokens.setListData(listaTokens);
        jListTabelaSimbolos.setListData(tabelaSimbolos);
    }

    public void preencherPalavrasReservadas() {
        tabelaSimbolos = new Vector<>();
        this.tabelaSimbolos.add("aleatorio");
        this.tabelaSimbolos.add("algoritmo");
        this.tabelaSimbolos.add("arquivo");
        this.tabelaSimbolos.add("ate");
        this.tabelaSimbolos.add("caractere");
        this.tabelaSimbolos.add("caso");
        this.tabelaSimbolos.add("cronometro");
        this.tabelaSimbolos.add("debug");
        this.tabelaSimbolos.add("e");
        this.tabelaSimbolos.add("eco");
        this.tabelaSimbolos.add("enquanto");
        this.tabelaSimbolos.add("entao");
        this.tabelaSimbolos.add("escolha");
        this.tabelaSimbolos.add("escreva");
        this.tabelaSimbolos.add("escreval");
        this.tabelaSimbolos.add("faca");
        this.tabelaSimbolos.add("falso");
        this.tabelaSimbolos.add("fimalgoritmo");
        this.tabelaSimbolos.add("fimenquanto");
        this.tabelaSimbolos.add("fimescolha");
        this.tabelaSimbolos.add("fimfuncao");
        this.tabelaSimbolos.add("fimpara");
        this.tabelaSimbolos.add("fimprocedimento");
        this.tabelaSimbolos.add("fimrepita");
        this.tabelaSimbolos.add("fimse");
        this.tabelaSimbolos.add("funcao");
        this.tabelaSimbolos.add("inicio");
        this.tabelaSimbolos.add("int");
        this.tabelaSimbolos.add("inteiro");
        this.tabelaSimbolos.add("interrompa");
        this.tabelaSimbolos.add("leia");
        this.tabelaSimbolos.add("limpatela");
        this.tabelaSimbolos.add("logico");
        this.tabelaSimbolos.add("mod");
        this.tabelaSimbolos.add("nao");
        this.tabelaSimbolos.add("ou");
        this.tabelaSimbolos.add("outrocaso");
        this.tabelaSimbolos.add("para");
        this.tabelaSimbolos.add("passo");
        this.tabelaSimbolos.add("pausa");
        this.tabelaSimbolos.add("real");
        this.tabelaSimbolos.add("procedimento");
        this.tabelaSimbolos.add("repita");
        this.tabelaSimbolos.add("retorne");
        this.tabelaSimbolos.add("se");
        this.tabelaSimbolos.add("senao");
        this.tabelaSimbolos.add("timer");
        this.tabelaSimbolos.add("var");
        this.tabelaSimbolos.add("vetor");
        this.tabelaSimbolos.add("verdadeiro");
        this.tabelaSimbolos.add("Xou");
        this.tabelaSimbolos.add("de");

        for (int i = 0; i < this.tabelaSimbolos.size(); i++) {
            int j = i + 1;
            this.tabelaSimbolos.set(i, ("(" + j + ") " + this.tabelaSimbolos.get(i) + ";"));
        }
    }

    public String analisarPalavra(String palavra) {
        palavra = palavra.toLowerCase();
        for (int i = 0; i < tabelaSimbolos.size(); i++) {
            if (tabelaSimbolos.get(i).substring(5, (tabelaSimbolos.get(i).length() - 1)).equals(palavra)) {
                return tabelaSimbolos.get(i);

            }

        }
        return "";
    }

}
