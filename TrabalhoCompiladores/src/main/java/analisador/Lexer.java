/* The following code was generated by JFlex 1.6.1 */

//Importacoes

package analisador;
import static analisador.Token.*;

//Definicoes


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Lucas/Documents/NetBeansProjects/MiniCompilador/TrabalhoCompiladores/src/main/java/analisador/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\6\1\7\1\7\1\6\22\0\1\4\1\0\1\21"+
    "\5\0\1\15\1\16\1\14\1\13\1\22\1\11\1\3\1\5\12\2"+
    "\1\23\1\0\1\10\1\12\1\24\2\0\27\1\1\51\2\1\1\17"+
    "\1\0\1\20\1\0\1\1\1\0\1\25\1\45\1\41\1\44\1\27"+
    "\1\47\1\34\1\46\1\33\2\1\1\26\1\35\1\43\1\31\1\50"+
    "\1\36\1\32\1\42\1\30\1\37\1\40\4\1\12\0\1\7\u1fa2\0"+
    "\1\7\1\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\0\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\1\1\22\16\1\1\0\1\23"+
    "\1\3\1\24\1\25\1\0\1\26\12\1\1\27\7\1"+
    "\1\30\1\1\1\31\6\1\1\0\1\2\1\32\2\1"+
    "\1\33\4\1\1\34\10\1\1\35\1\1\1\36\1\37"+
    "\6\1\1\40\11\1\1\41\3\1\1\42\10\1\1\43"+
    "\7\1\1\44\4\1\1\45\7\1\1\46\12\1\1\47"+
    "\1\1\1\50\6\1\1\51\3\1\1\52\1\53\1\54"+
    "\4\1\1\55\4\1\1\56\1\57\4\1\1\60\6\1"+
    "\1\61\2\1\1\62\12\1\1\63\3\1\1\64\1\1"+
    "\1\65\1\66\2\1\1\67\1\1\1\70\10\1\1\71"+
    "\5\1\1\72\1\73\14\1\1\74\1\75\1\76\1\77"+
    "\2\1\1\100\4\1\1\101\1\102\2\1\1\103\1\104"+
    "\1\105\1\1\1\106\4\1\1\107\2\1\1\110\1\1"+
    "\1\111\2\1\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\250\0\u0126\0\250\0\250\0\250\0\250\0\250\0\u0150"+
    "\0\250\0\250\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c"+
    "\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c"+
    "\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e\0\250\0\u0498\0\250"+
    "\0\250\0\u04c2\0\250\0\u04ec\0\u0516\0\u0540\0\u056a\0\u0594"+
    "\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4"+
    "\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834"+
    "\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u046e"+
    "\0\u04c2\0\u0984\0\u09ae\0\52\0\u09d8\0\u0a02\0\u0a2c\0\u0a56"+
    "\0\52\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c"+
    "\0\u0ba6\0\u0bd0\0\u0bfa\0\52\0\52\0\u0c24\0\u0c4e\0\u0c78"+
    "\0\u0ca2\0\u0ccc\0\u0cf6\0\52\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e"+
    "\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46\0\u0e70\0\52\0\u0e9a\0\u0ec4"+
    "\0\u0eee\0\52\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea"+
    "\0\u1014\0\u103e\0\52\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110"+
    "\0\u113a\0\u1164\0\52\0\u118e\0\u11b8\0\u11e2\0\u120c\0\52"+
    "\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308\0\u1332\0\52"+
    "\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404\0\u142e\0\u1458\0\u1482"+
    "\0\u14ac\0\u14d6\0\52\0\u1500\0\52\0\u152a\0\u1554\0\u157e"+
    "\0\u15a8\0\u15d2\0\u15fc\0\52\0\u1626\0\u1650\0\u167a\0\52"+
    "\0\52\0\52\0\u16a4\0\u16ce\0\u16f8\0\u1722\0\52\0\u174c"+
    "\0\u1776\0\u17a0\0\u17ca\0\52\0\52\0\u17f4\0\u181e\0\u1848"+
    "\0\u1872\0\52\0\u189c\0\u18c6\0\u18f0\0\u191a\0\u1944\0\u196e"+
    "\0\52\0\u1998\0\u19c2\0\52\0\u19ec\0\u1a16\0\u1a40\0\u1a6a"+
    "\0\u1a94\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c\0\u1b66\0\52\0\u1b90"+
    "\0\u1bba\0\u1be4\0\52\0\u1c0e\0\52\0\u1c38\0\u1c62\0\u1c8c"+
    "\0\52\0\u1cb6\0\52\0\u1ce0\0\u1d0a\0\u1d34\0\u1d5e\0\u1d88"+
    "\0\u1db2\0\u1ddc\0\u1e06\0\52\0\u1e30\0\u1e5a\0\u1e84\0\u1eae"+
    "\0\u1ed8\0\52\0\52\0\u1f02\0\u1f2c\0\u1f56\0\u1f80\0\u1faa"+
    "\0\u1fd4\0\u1ffe\0\u2028\0\u2052\0\u207c\0\u20a6\0\u20d0\0\52"+
    "\0\52\0\52\0\52\0\u20fa\0\u2124\0\52\0\u214e\0\u2178"+
    "\0\u21a2\0\u21cc\0\52\0\52\0\u21f6\0\u2220\0\52\0\52"+
    "\0\52\0\u224a\0\52\0\u2274\0\u229e\0\u22c8\0\u22f2\0\52"+
    "\0\u231c\0\u2346\0\52\0\u2370\0\52\0\u239a\0\u23c4\0\52";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\5\1\0"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\2\1\33\2\2\1\34"+
    "\1\35\1\36\1\37\1\40\2\2\1\41\1\42\1\43"+
    "\1\0\1\2\1\44\22\0\25\2\2\0\1\3\1\45"+
    "\51\0\1\46\125\0\1\47\55\0\1\50\1\51\41\0"+
    "\1\3\47\0\6\52\2\0\42\52\12\0\1\53\40\0"+
    "\1\2\1\44\22\0\1\2\1\54\1\2\1\55\1\2"+
    "\1\56\17\2\1\0\1\2\1\44\22\0\2\2\1\57"+
    "\1\2\1\60\1\2\1\61\16\2\1\0\1\2\1\44"+
    "\22\0\14\2\1\62\1\63\1\64\6\2\1\0\1\2"+
    "\1\44\22\0\6\2\1\65\16\2\1\0\1\2\1\44"+
    "\22\0\12\2\1\66\12\2\1\0\1\2\1\44\22\0"+
    "\2\2\1\67\22\2\1\0\1\2\1\44\22\0\16\2"+
    "\1\70\6\2\1\0\1\2\1\44\22\0\4\2\1\71"+
    "\20\2\1\0\1\2\1\44\22\0\1\72\1\2\1\73"+
    "\22\2\1\0\1\2\1\44\22\0\1\74\4\2\1\75"+
    "\17\2\1\0\1\2\1\44\22\0\2\2\1\76\22\2"+
    "\1\0\1\2\1\44\22\0\1\77\24\2\1\0\1\2"+
    "\1\44\22\0\2\2\1\100\22\2\1\0\1\2\1\44"+
    "\22\0\1\101\5\2\1\102\3\2\1\103\12\2\1\0"+
    "\1\2\1\44\22\0\1\104\4\2\1\105\17\2\1\0"+
    "\1\2\1\44\22\0\4\2\1\106\20\2\1\0\1\2"+
    "\1\44\1\107\21\0\25\2\2\0\1\110\47\0\6\47"+
    "\2\0\42\47\6\52\2\0\11\52\1\111\30\52\1\0"+
    "\1\2\1\44\22\0\2\2\1\112\4\2\1\113\15\2"+
    "\1\0\1\2\1\44\22\0\2\2\1\114\22\2\1\0"+
    "\1\2\1\44\22\0\11\2\1\115\13\2\1\0\1\2"+
    "\1\44\22\0\6\2\1\116\16\2\1\0\1\2\1\44"+
    "\22\0\7\2\1\117\15\2\1\0\1\2\1\44\22\0"+
    "\10\2\1\120\14\2\1\0\1\2\1\44\22\0\4\2"+
    "\1\121\20\2\1\0\1\2\1\44\22\0\14\2\1\122"+
    "\10\2\1\0\1\2\1\44\22\0\3\2\1\123\5\2"+
    "\1\124\13\2\1\0\1\2\1\44\22\0\10\2\1\125"+
    "\14\2\1\0\1\2\1\44\22\0\3\2\1\126\21\2"+
    "\1\0\1\2\1\44\22\0\1\127\2\2\1\130\17\2"+
    "\1\131\1\2\1\0\1\2\1\44\22\0\3\2\1\132"+
    "\2\2\1\133\16\2\1\0\1\2\1\44\22\0\17\2"+
    "\1\134\5\2\1\0\1\2\1\44\22\0\5\2\1\135"+
    "\17\2\1\0\1\2\1\44\22\0\3\2\1\136\1\2"+
    "\1\137\17\2\1\0\1\2\1\44\22\0\5\2\1\140"+
    "\7\2\1\141\7\2\1\0\1\2\1\44\22\0\4\2"+
    "\1\142\20\2\1\0\1\2\1\44\22\0\16\2\1\143"+
    "\6\2\1\0\1\2\1\44\22\0\4\2\1\144\20\2"+
    "\1\0\1\2\1\44\22\0\20\2\1\145\4\2\1\0"+
    "\1\2\1\44\22\0\1\2\1\146\12\2\1\147\10\2"+
    "\1\0\1\2\1\44\22\0\10\2\1\150\14\2\1\0"+
    "\1\2\1\44\22\0\16\2\1\151\6\2\1\0\1\2"+
    "\1\44\22\0\5\2\1\152\4\2\1\153\2\2\1\154"+
    "\7\2\1\0\1\2\1\44\22\0\4\2\1\155\20\2"+
    "\1\0\1\2\1\44\22\0\12\2\1\156\12\2\2\0"+
    "\1\2\50\0\1\2\1\44\22\0\1\157\24\2\1\0"+
    "\1\2\1\44\22\0\4\2\1\160\20\2\1\0\1\2"+
    "\1\44\22\0\12\2\1\161\12\2\1\0\1\2\1\44"+
    "\22\0\1\162\24\2\1\0\1\2\1\44\22\0\6\2"+
    "\1\163\16\2\1\0\1\2\1\44\22\0\23\2\1\164"+
    "\1\2\1\0\1\2\1\44\22\0\4\2\1\165\1\166"+
    "\17\2\1\0\1\2\1\44\22\0\1\167\24\2\1\0"+
    "\1\2\1\44\22\0\12\2\1\170\12\2\1\0\1\2"+
    "\1\44\22\0\2\2\1\171\22\2\1\0\1\2\1\44"+
    "\22\0\5\2\1\172\17\2\1\0\1\2\1\44\22\0"+
    "\1\2\1\173\23\2\1\0\1\2\1\44\22\0\4\2"+
    "\1\174\20\2\1\0\1\2\1\44\22\0\6\2\1\175"+
    "\16\2\1\0\1\2\1\44\22\0\2\2\1\176\22\2"+
    "\1\0\1\2\1\44\22\0\14\2\1\177\10\2\1\0"+
    "\1\2\1\44\22\0\4\2\1\200\20\2\1\0\1\2"+
    "\1\44\22\0\17\2\1\201\5\2\1\0\1\2\1\44"+
    "\22\0\1\202\24\2\1\0\1\2\1\44\22\0\4\2"+
    "\1\203\20\2\1\0\1\2\1\44\22\0\16\2\1\204"+
    "\6\2\1\0\1\2\1\44\22\0\1\205\24\2\1\0"+
    "\1\2\1\44\22\0\12\2\1\206\12\2\1\0\1\2"+
    "\1\44\22\0\15\2\1\207\7\2\1\0\1\2\1\44"+
    "\22\0\1\210\24\2\1\0\1\2\1\44\22\0\1\211"+
    "\1\2\1\212\2\2\1\213\7\2\1\214\4\2\1\215"+
    "\1\216\1\2\1\0\1\2\1\44\22\0\14\2\1\217"+
    "\10\2\1\0\1\2\1\44\22\0\1\220\24\2\1\0"+
    "\1\2\1\44\22\0\15\2\1\221\7\2\1\0\1\2"+
    "\1\44\22\0\15\2\1\222\7\2\1\0\1\2\1\44"+
    "\22\0\14\2\1\223\10\2\1\0\1\2\1\44\22\0"+
    "\3\2\1\224\21\2\1\0\1\2\1\44\22\0\5\2"+
    "\1\225\17\2\1\0\1\2\1\44\22\0\6\2\1\226"+
    "\16\2\1\0\1\2\1\44\22\0\14\2\1\227\10\2"+
    "\1\0\1\2\1\44\22\0\1\230\24\2\1\0\1\2"+
    "\1\44\22\0\1\2\1\231\23\2\1\0\1\2\1\44"+
    "\22\0\2\2\1\232\22\2\1\0\1\2\1\44\22\0"+
    "\4\2\1\233\20\2\1\0\1\2\1\44\22\0\1\234"+
    "\24\2\1\0\1\2\1\44\22\0\5\2\1\235\17\2"+
    "\1\0\1\2\1\44\22\0\4\2\1\236\20\2\1\0"+
    "\1\2\1\44\22\0\5\2\1\237\17\2\1\0\1\2"+
    "\1\44\22\0\3\2\1\240\21\2\1\0\1\2\1\44"+
    "\22\0\5\2\1\241\1\242\16\2\1\0\1\2\1\44"+
    "\22\0\6\2\1\243\16\2\1\0\1\2\1\44\22\0"+
    "\5\2\1\244\17\2\1\0\1\2\1\44\22\0\1\245"+
    "\24\2\1\0\1\2\1\44\22\0\14\2\1\246\10\2"+
    "\1\0\1\2\1\44\22\0\4\2\1\247\20\2\1\0"+
    "\1\2\1\44\22\0\4\2\1\250\20\2\1\0\1\2"+
    "\1\44\22\0\7\2\1\251\15\2\1\0\1\2\1\44"+
    "\22\0\4\2\1\252\20\2\1\0\1\2\1\44\22\0"+
    "\1\2\1\253\23\2\1\0\1\2\1\44\22\0\15\2"+
    "\1\254\1\255\6\2\1\0\1\2\1\44\22\0\2\2"+
    "\1\256\22\2\1\0\1\2\1\44\22\0\2\2\1\257"+
    "\22\2\1\0\1\2\1\44\22\0\12\2\1\260\12\2"+
    "\1\0\1\2\1\44\22\0\1\261\4\2\1\262\17\2"+
    "\1\0\1\2\1\44\22\0\1\263\24\2\1\0\1\2"+
    "\1\44\22\0\1\264\24\2\1\0\1\2\1\44\22\0"+
    "\4\2\1\265\20\2\1\0\1\2\1\44\22\0\2\2"+
    "\1\266\22\2\1\0\1\2\1\44\22\0\4\2\1\267"+
    "\20\2\1\0\1\2\1\44\22\0\6\2\1\270\16\2"+
    "\1\0\1\2\1\44\22\0\13\2\1\271\11\2\1\0"+
    "\1\2\1\44\22\0\4\2\1\272\20\2\1\0\1\2"+
    "\1\44\22\0\3\2\1\273\21\2\1\0\1\2\1\44"+
    "\22\0\21\2\1\274\3\2\1\0\1\2\1\44\22\0"+
    "\13\2\1\275\11\2\1\0\1\2\1\44\22\0\16\2"+
    "\1\276\6\2\1\0\1\2\1\44\22\0\14\2\1\277"+
    "\10\2\1\0\1\2\1\44\22\0\16\2\1\300\6\2"+
    "\1\0\1\2\1\44\22\0\1\301\24\2\1\0\1\2"+
    "\1\44\22\0\5\2\1\302\17\2\1\0\1\2\1\44"+
    "\22\0\5\2\1\303\17\2\1\0\1\2\1\44\22\0"+
    "\4\2\1\304\20\2\1\0\1\2\1\44\22\0\17\2"+
    "\1\305\5\2\1\0\1\2\1\44\22\0\3\2\1\306"+
    "\21\2\1\0\1\2\1\44\22\0\10\2\1\307\14\2"+
    "\1\0\1\2\1\44\22\0\7\2\1\310\15\2\1\0"+
    "\1\2\1\44\22\0\14\2\1\311\10\2\1\0\1\2"+
    "\1\44\22\0\11\2\1\312\13\2\1\0\1\2\1\44"+
    "\22\0\23\2\1\313\1\2\1\0\1\2\1\44\22\0"+
    "\16\2\1\314\6\2\1\0\1\2\1\44\22\0\5\2"+
    "\1\315\17\2\1\0\1\2\1\44\22\0\4\2\1\316"+
    "\20\2\1\0\1\2\1\44\22\0\4\2\1\317\20\2"+
    "\1\0\1\2\1\44\22\0\17\2\1\320\5\2\1\0"+
    "\1\2\1\44\22\0\5\2\1\321\17\2\1\0\1\2"+
    "\1\44\22\0\3\2\1\322\21\2\1\0\1\2\1\44"+
    "\22\0\4\2\1\323\20\2\1\0\1\2\1\44\22\0"+
    "\2\2\1\324\22\2\1\0\1\2\1\44\22\0\1\325"+
    "\24\2\1\0\1\2\1\44\22\0\1\326\24\2\1\0"+
    "\1\2\1\44\22\0\3\2\1\327\21\2\1\0\1\2"+
    "\1\44\22\0\1\330\24\2\1\0\1\2\1\44\22\0"+
    "\2\2\1\331\22\2\1\0\1\2\1\44\22\0\4\2"+
    "\1\332\20\2\1\0\1\2\1\44\22\0\4\2\1\333"+
    "\20\2\1\0\1\2\1\44\22\0\2\2\1\334\22\2"+
    "\1\0\1\2\1\44\22\0\2\2\1\335\22\2\1\0"+
    "\1\2\1\44\22\0\2\2\1\336\22\2\1\0\1\2"+
    "\1\44\22\0\4\2\1\337\20\2\1\0\1\2\1\44"+
    "\22\0\4\2\1\340\20\2\1\0\1\2\1\44\22\0"+
    "\12\2\1\341\12\2\1\0\1\2\1\44\22\0\6\2"+
    "\1\342\16\2\1\0\1\2\1\44\22\0\14\2\1\343"+
    "\10\2\1\0\1\2\1\44\22\0\1\344\24\2\1\0"+
    "\1\2\1\44\22\0\14\2\1\345\10\2\1\0\1\2"+
    "\1\44\22\0\6\2\1\346\16\2\1\0\1\2\1\44"+
    "\22\0\6\2\1\347\16\2\1\0\1\2\1\44\22\0"+
    "\10\2\1\350\14\2\1\0\1\2\1\44\22\0\1\2"+
    "\1\351\23\2\1\0\1\2\1\44\22\0\1\2\1\352"+
    "\23\2\1\0\1\2\1\44\22\0\4\2\1\353\20\2"+
    "\1\0\1\2\1\44\22\0\15\2\1\354\7\2\1\0"+
    "\1\2\1\44\22\0\10\2\1\355\14\2\1\0\1\2"+
    "\1\44\22\0\6\2\1\356\16\2\1\0\1\2\1\44"+
    "\22\0\5\2\1\357\17\2\1\0\1\2\1\44\22\0"+
    "\3\2\1\360\21\2\1\0\1\2\1\44\22\0\5\2"+
    "\1\361\17\2\1\0\1\2\1\44\22\0\1\2\1\362"+
    "\23\2\1\0\1\2\1\44\22\0\1\363\24\2\1\0"+
    "\1\2\1\44\22\0\3\2\1\364\21\2\1\0\1\2"+
    "\1\44\22\0\1\365\24\2\1\0\1\2\1\44\22\0"+
    "\2\2\1\366\22\2\1\0\1\2\1\44\22\0\10\2"+
    "\1\367\14\2\1\0\1\2\1\44\22\0\4\2\1\370"+
    "\20\2\1\0\1\2\1\44\22\0\4\2\1\371\20\2"+
    "\1\0\1\2\1\44\22\0\1\372\24\2\1\0\1\2"+
    "\1\44\22\0\4\2\1\373\20\2\1\0\1\2\1\44"+
    "\22\0\23\2\1\374\1\2\1\0\1\2\1\44\22\0"+
    "\5\2\1\375\17\2\1\0\1\2\1\44\22\0\2\2"+
    "\1\376\22\2\1\0\1\2\1\44\22\0\5\2\1\377"+
    "\17\2\1\0\1\2\1\44\22\0\6\2\1\u0100\16\2"+
    "\1\0\1\2\1\44\22\0\21\2\1\u0101\3\2\1\0"+
    "\1\2\1\44\22\0\16\2\1\u0102\6\2\1\0\1\2"+
    "\1\44\22\0\1\u0103\24\2\1\0\1\2\1\44\22\0"+
    "\4\2\1\u0104\20\2\1\0\1\2\1\44\22\0\17\2"+
    "\1\u0105\5\2\1\0\1\2\1\44\22\0\2\2\1\u0106"+
    "\22\2\1\0\1\2\1\44\22\0\1\u0107\24\2\1\0"+
    "\1\2\1\44\22\0\4\2\1\u0108\20\2\1\0\1\2"+
    "\1\44\22\0\4\2\1\u0109\20\2\1\0\1\2\1\44"+
    "\22\0\3\2\1\u010a\21\2\1\0\1\2\1\44\22\0"+
    "\1\u010b\24\2\1\0\1\2\1\44\22\0\3\2\1\u010c"+
    "\21\2\1\0\1\2\1\44\22\0\6\2\1\u010d\16\2"+
    "\1\0\1\2\1\44\22\0\16\2\1\u010e\6\2\1\0"+
    "\1\2\1\44\22\0\10\2\1\u010f\14\2\1\0\1\2"+
    "\1\44\22\0\4\2\1\u0110\20\2\1\0\1\2\1\44"+
    "\22\0\10\2\1\u0111\14\2\1\0\1\2\1\44\22\0"+
    "\3\2\1\u0112\21\2\1\0\1\2\1\44\22\0\4\2"+
    "\1\u0113\20\2\1\0\1\2\1\44\22\0\2\2\1\u0114"+
    "\22\2\1\0\1\2\1\44\22\0\4\2\1\u0115\20\2"+
    "\1\0\1\2\1\44\22\0\16\2\1\u0116\6\2\1\0"+
    "\1\2\1\44\22\0\3\2\1\u0117\21\2\1\0\1\2"+
    "\1\44\22\0\4\2\1\u0118\20\2";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9198];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\0\1\11\3\1\1\11\1\1\5\11"+
    "\1\1\2\11\22\1\1\0\1\11\1\1\2\11\1\0"+
    "\1\11\33\1\1\0\321\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[280];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexema;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { lexema=yytext(); return ID;
            }
          case 75: break;
          case 2: 
            { lexema=yytext(); return NUM;
            }
          case 76: break;
          case 3: 
            { /*Ignore*/
            }
          case 77: break;
          case 4: 
            { return DIVISAO;
            }
          case 78: break;
          case 5: 
            { return MENOR;
            }
          case 79: break;
          case 6: 
            { return SUBTRACAO;
            }
          case 80: break;
          case 7: 
            { return COMPARACAO;
            }
          case 81: break;
          case 8: 
            { return SOMA;
            }
          case 82: break;
          case 9: 
            { return MULTIPLICACAO;
            }
          case 83: break;
          case 10: 
            { return ABRE_PARENTESIS;
            }
          case 84: break;
          case 11: 
            { return FECHA_PARENTESIS;
            }
          case 85: break;
          case 12: 
            { return ABRE_COLCHETES;
            }
          case 86: break;
          case 13: 
            { return FECHA_COLCHETES;
            }
          case 87: break;
          case 14: 
            { return ASPAS;
            }
          case 88: break;
          case 15: 
            { return VIRGULA;
            }
          case 89: break;
          case 16: 
            { return TIPO;
            }
          case 90: break;
          case 17: 
            { return MAIOR;
            }
          case 91: break;
          case 18: 
            { return E;
            }
          case 92: break;
          case 19: 
            { return INTERVALO_VETOR;
            }
          case 93: break;
          case 20: 
            { return ATRIBUICAO;
            }
          case 94: break;
          case 21: 
            { return MENOR_IGUAL;
            }
          case 95: break;
          case 22: 
            { return MAIOR_IGUAL;
            }
          case 96: break;
          case 23: 
            { return OU;
            }
          case 97: break;
          case 24: 
            { return SE;
            }
          case 98: break;
          case 25: 
            { return DE;
            }
          case 99: break;
          case 26: 
            { lexema=yytext(); return LITERAL;
            }
          case 100: break;
          case 27: 
            { return ATE;
            }
          case 101: break;
          case 28: 
            { return ECO;
            }
          case 102: break;
          case 29: 
            { return INT;
            }
          case 103: break;
          case 30: 
            { return MOD;
            }
          case 104: break;
          case 31: 
            { return VAR;
            }
          case 105: break;
          case 32: 
            { return NAO;
            }
          case 106: break;
          case 33: 
            { return XOU;
            }
          case 107: break;
          case 34: 
            { return LEIA;
            }
          case 108: break;
          case 35: 
            { return REAL;
            }
          case 109: break;
          case 36: 
            { return CASO;
            }
          case 110: break;
          case 37: 
            { return FACA;
            }
          case 111: break;
          case 38: 
            { return PARA;
            }
          case 112: break;
          case 39: 
            { return ENTAO;
            }
          case 113: break;
          case 40: 
            { return TIMER;
            }
          case 114: break;
          case 41: 
            { return VETOR;
            }
          case 115: break;
          case 42: 
            { return SENAO;
            }
          case 116: break;
          case 43: 
            { return DEBUG;
            }
          case 117: break;
          case 44: 
            { return FALSO;
            }
          case 118: break;
          case 45: 
            { return FIMSE;
            }
          case 119: break;
          case 46: 
            { return PAUSA;
            }
          case 120: break;
          case 47: 
            { return PASSO;
            }
          case 121: break;
          case 48: 
            { return LOGICO;
            }
          case 122: break;
          case 49: 
            { return REPITA;
            }
          case 123: break;
          case 50: 
            { return INICIO;
            }
          case 124: break;
          case 51: 
            { return FUNCAO;
            }
          case 125: break;
          case 52: 
            { return ARQUIVO;
            }
          case 126: break;
          case 53: 
            { return ESCOLHA;
            }
          case 127: break;
          case 54: 
            { return ESCREVA;
            }
          case 128: break;
          case 55: 
            { return RETORNE;
            }
          case 129: break;
          case 56: 
            { return INTEIRO;
            }
          case 130: break;
          case 57: 
            { return FIMPARA;
            }
          case 131: break;
          case 58: 
            { return ESCREVAL;
            }
          case 132: break;
          case 59: 
            { return ENQUANTO;
            }
          case 133: break;
          case 60: 
            { return ALEATORIO;
            }
          case 134: break;
          case 61: 
            { return ALGORITMO;
            }
          case 135: break;
          case 62: 
            { return LIMPATELA;
            }
          case 136: break;
          case 63: 
            { return OUTROCASO;
            }
          case 137: break;
          case 64: 
            { return CARACTERE;
            }
          case 138: break;
          case 65: 
            { return FIMREPITA;
            }
          case 139: break;
          case 66: 
            { return FIMFUNCAO;
            }
          case 140: break;
          case 67: 
            { return INTERROMPA;
            }
          case 141: break;
          case 68: 
            { return VERDADEIRO;
            }
          case 142: break;
          case 69: 
            { return CRONOMETRO;
            }
          case 143: break;
          case 70: 
            { return FIMESCOLHA;
            }
          case 144: break;
          case 71: 
            { return FIMENQUANTO;
            }
          case 145: break;
          case 72: 
            { return FIMALGORITMO;
            }
          case 146: break;
          case 73: 
            { return PROCEDIMENTO;
            }
          case 147: break;
          case 74: 
            { return FIMPROCEDIMENTO;
            }
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
